/*
** ###################################################################
**     This code is generated by the Device Initialization Tool.
**     It is overwritten during code generation.
**     USER MODIFICATION ARE NOT PRESERVED IN THIS FILE.
**
**     Project   : myRTOS
**     Processor : MCF51QE128CLK
**     Version   : Bean 01.011, Driver 01.05, CPU db: 3.00.052
**     Datasheet : MCF51QE128RM, Rev. 3, 9/2007
**     Date/Time : 18/09/2008, 17:41
**     Abstract  :
**         This module contains device initialization code 
**         for selected on-chip peripherals.
**     Contents  :
**         Function "MCU_init" initializes selected peripherals
**
**     (c) Copyright UNIS, spol. s r.o. 1997-2008
**     UNIS, spol. s r.o.
**     Jundrovska 33
**     624 00 Brno
**     Czech Republic
**     http      : www.processorexpert.com
**     mail      : info@processorexpert.com
** ###################################################################
*/

#ifndef __myRTOS_H
#define __myRTOS_H 1

/* Include shared modules, which are used for whole project */


/* User declarations and definitions */
/*   Code, declarations and definitions here will be preserved during code generation */
/* End of user declarations and definitions */

extern void __initialize_hardware(void);
/*
** ===================================================================
**     Method      :  __initialize_hardware (bean MCF51QE128_80)
**
**     Description :
**         Initialization code for CPU core and a clock source.
** ===================================================================
*/


extern void MCU_init(void);
/*
** ===================================================================
**     Method      :  MCU_init (bean MCF51QE128_80)
**
**     Description :
**         Device initialization code for selected peripherals.
** ===================================================================
*/

/* pragma to disable "possibly unassigned ISR handler" message generated by compiler on definition of ISR without vector number */
#pragma warn_absolute off


__interrupt void isr_default(void);
/*
** ===================================================================
**     Interrupt handler : isr_default
**
**     Description :
**         User interrupt service routine. 
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/



__interrupt void SwitchContext(void);
/*
** ===================================================================
**     Interrupt handler : SwitchContext
**
**     Description :
**         User interrupt service routine. 
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/



__interrupt void isrVlvd(void);
/*
** ===================================================================
**     Interrupt handler : isrVlvd
**
**     Description :
**         User interrupt service routine. 
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/



__interrupt void TickTimer(void);
/*
** ===================================================================
**     Interrupt handler : TickTimer
**
**     Description :
**         User interrupt service routine. 
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/





/* END myRTOS */

#endif
/*
** ###################################################################
**
**     This file was created by UNIS Processor Expert 3.03 [04.07]
**     for the Freescale ColdFireV1 series of microcontrollers.
**
** ###################################################################
*/
